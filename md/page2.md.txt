# Chapter 2: Object Orientation

### Encapsulation
- Provides you _maintainability_, _flexibility_, and _extensibility_.
- You must keep instance variables protected with an access modifier (often private).
- Make public accessor methods and use the most common naming convention of _set<someProperty>_ and _get<someProperty>_.

### Inheritance
- Inheritance is most commonly used to promote code reuse and to use polymorphism.
- _IS-A_ relation (based on class inheritance or interface implementation) != _HAS-A_ relation (class A HAS-A B if code in class A has a reference to an instance of class B).

### Polymorphism
- "Many forms". Lets you treat any subclass of _foo_ as a _foo_.
- The methods you can call on a reference are totally dependent on the declared type of the variable.
- A reference variable can be of only one type, and once declared, that type can never be changed (although the object it references can change).
- A reference is a variable, so it can be reassigned to other objects (unless it is _final_).
- A reference variable can refer to any object of the same type as the declared reference, or to any subtype of the declared type.
- If a reference variable is declared as an interface type, it can reference any object of any class that implements the interface.
- The compiler only knows about the declared reference type, but the Java Virtual Machine (JVM) at runtime knows what the object really is, so even if the subclass overrides an inherited method and it is called via a superclass reference, the JVM will invoke the subclass version. This only applies to instance methods, not static methods.
- Works with interfaces as well as superclasses.

###### Casting
- Upcasting(to a more general type) happens implicitly because you are restricting the number of methods you can invoke.
- A more General class cannot be cast to a more specific class, you can´t do 'Main m = (Main)new Father();'.
- Examples:
- ``` java
    public class Main {
        public static void main(String[] args) { 
            Object o = new Main();
            myFunc((Main)o); 
        }
        /* Will compile but not run
        public static void main(String[] args) { 
            Object o = new Object();
            myFunc((Main)o); 
        }
        */
        /* Will not compile, even though should run
        public static void main(String[] args) { 
            Object o = new Main();
            myFunc(o); 
        }
        */
        public static void myFunc(Main c) {}
    }
```
### Overriding and Overloading

###### Overriding
- If a method can't be inherited, you cannot override it (see Chapter 1). 
- You can't override a method marked _final_ or _static_.
- To invoke the Superclass version of an overridden Method: _super.bar()_.
- If you call via a reference variable a method that declares a checked exception, then even if it is overriden and the overriden method does not declare exceptions, the compiler only knows about the original method with the exception.

###### Overloading.
- A method can be overloaded in the same class or in a subclass.

###### Differences

|             | Overloaded Method                                                                                                                                                                                                                            | Overriden Method                                                                                                  |
|-------------|----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|-------------------------------------------------------------------------------------------------------------------|
| Argument(s) | Must change.                                                                                                                                                                                                                                 | Must not change.                                                                                                  |
| Return type | Can change.                                                                                                                                                                                                                                  | Can't change except for covariant returns (Covered later this chapter).                                           |
| Exceptions  | Can change.                                                                                                                                                                                                                                  | Can throw narrower, fewer or no exceptions. Must not throw new or broader checked exceptions. Can throw any unchecked (runtime) exception                                       |
| Access      | Can change.                                                                                                                                                                                                                                  | Must not make more restrictive (can be less restrictive).                                                         |
| Invocation  | Reference type determines which overloaded version (based on declared argument types) is selected. Happens at compile time. At runtime, the argument match will already have been nailed down, just not the class in which the method lives. | Object type (the type of the actual instance on the heap) determines which method is selected. Happens at runtime |

### Implementing an interface
- An abstract class can implement an interface, and it can just pass the buck to its first concrete subclass.
- A class cannot extend more than one class to prevent the “Deadly Diamond of Death”, but it can implement multiple interfaces:
- ``` java
    public class Ball implements Bounceable, Serializable, Runnable { ... };
    ```
- An interface can never implement anything.

### Legal return types
- If you inherit a method but overload it in a subclass, you're not subject to the restrictions of overriding, which means you can declare any return type you like. What you can't do is change only the return type (argument list must change).
- Overridding: if the new return type is a subtype of the declared return type of the overridden method, the return is a covariant return.
- Object reference return types: you can return any object type that can be implicitly cast to the declared return type, or _null_.
- Primitive return types: you can return any value or variable that can be implicitly converted to the declared return type (for example, you can return a _char_ from an _int_ function).
- _void_: although you can _return;_, you must not return anything.

### Constructors and Instantiation
- They have no return type.
- Their names must exactly match the class name.
- Typically used to initialize instance variable state.
- When you call a constructor, first the parent's constructor is called, up to Object.
- Constructors can use any access modifier, including _private_. 
- If you don't type a constructor into your class code, a default (same access modifier as the class, no arguments and a no-arg call to the super constructor: _super()_) constructor will be automatically generated by the compiler. If you've typed in a constructor with arguments, you won't have a no-arg constructor unless you type it in yourself.
- Every constructor has, as its first statement, either a call to an overloaded constructor (_this()_) or a call to the superclass constructor (_super()_).
- If you type a constructor and don´t make the call to _this()_ or _super()_, the compiler will insert a no-arg call to _super()_ as the first statement in the constructor.
- At compile time, the compiler moves every instance variable initialization to every constructor of your class, just after the super()/this() call.
- Only static variables and methods can be accessed as part of the call to _super()_ or _this()_.
- Abstract classes have constructors, and those constructors are always called when a concrete subclass is instantiated.
-  If your superclass does not have a no-arg constructor, then in your subclass you will not be able to use the default constructor call _super()_supplied by the compiler.
- Constructors can´t be overriden (they are not methods), but they _can_ be overloaded.

### Initialization Blocks
- Initialization blocks run once, when the class is first loaded (static initialization blocks) or everytime an instance is created (instance initialization blocks).
- Init blocks execute in the order in which they appear.
- Class members are available from static/non-static init blocks.
- The order of execution for init blocks and constructors is:
    1. Statics Init blocks - from general to specific (from Object to the class in question).
    2. Init blocks along with constructor code - from general to specific (from Object to the class in question).
- ``` java
    class Init {
     Init(int x) { System.out.println("1-arg const"); }
     Init() { System.out.println("no-arg const"); }
     static { System.out.println("1st static init"); }
     { System.out.println("1st instance init"); }
     { System.out.println("2nd instance init"); }
     static { System.out.println("2nd static init"); }
     public static void main(String [] args) {
       new Init();
       new Init(7);
    } }
    ```
    prints this:
- ```
    1st static init
    2nd static init
    1st instance init
    2nd instance init
    no-arg const
    1st instance init
    2nd instance init
    1-arg const
    ```

### Static variables and methods
- Used in the utility-method-always-runs-the-same scenario and the keep-a-running-total-of-instances scenario.
- Because variables and methods marked static belong to the class, you need only have the class available to be able to invoke a static method or access a static variable (as opposed to an instance of the class).
- As well as using it on a reference to an instance (the reference type will be the one that matters, not the object it refers to), you can access a static method (or static variable) using the dot operator on the class name.
- The contents of a static varibale is also shared between any classes that extend the class in which it was declared.