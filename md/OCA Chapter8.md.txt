# Chapter 8: String Processing, Data Formatting and Resource Bundles

### Dates, Numbers, Currencies and Locales

###### java.util.Date
- _new Date()_ creates an instance of _Date_ representing the current moment.
- You can use _Date.getTime()_ and _Date.setTime()_.
- A Date is the number of milliseconds since January 1, 1970, stored in a long.

###### java.util.Calendar
- Is an abstract class, so you have to use one of the overloaded _getInstance()_ static factory methods. _java.util.GregorianCalendar_ is what you'll almost certainly get.
- Days of the week are for example: _Calendar.SUNDAY_.
- To know what the first day of the week is. Typically, _SUNDAY_ or _MONDAY_:
	```java
	c.getFirstDayOfWeek()
	```
- To get the day of the week:
	```java
	c.get(Calendar.DAY_OF_WEEK))
	```
- Calendar's _add()_ method lets you add or substract time
	```java
	c.add(Calendar.HOUR, -4)
	```
- The roll() method acts like the add() method, except there is no carry.
- To convert a calendar to a date:
	```java
	Date d2 = c.getTime();
	```

###### java.text.DateFormat
- _DateFormat_ is another factory class, we use its static fields to customize our various instances of it.
	```java
	Date d1 = new Date(1_000_000_000_000L);
	DateFormat[] dfa = new DateFormat[6];
	dfa[0] = DateFormat.getInstance();
	dfa[1] = DateFormat.getDateInstance();
	dfa[2] = DateFormat.getDateInstance(DateFormat.SHORT);
	dfa[3] = DateFormat.getDateInstance(DateFormat.MEDIUM);
	dfa[4] = DateFormat.getDateInstance(DateFormat.LONG);
	dfa[5] = DateFormat.getDateInstance(DateFormat.FULL);
	for(DateFormat df : dfa)
		System.out.println(df.format(d1));
	```
-	You can parse a _String_ to a _Date_
	```java
	DateFormat df = DateFormat.getDateInstance(DateFormat.SHORT);
	try {
		Date d2 = df.parse("9/8/01");
		System.out.println("parsed = " + d2.toString());
	} catch (ParseException pe) {
		System.out.println("parse exc"); 
	}
	```

###### java.text.NumberFormat
- _NumberFormat_ is also abstract.
	```java
	float f1 = 123.4567f;
	Locale locFR = new Locale("fr");          // France
	NumberFormat[] nfa = new NumberFormat[4];
	nfa[0] = NumberFormat.getInstance();
	nfa[1] = NumberFormat.getInstance(locFR);
	nfa[2] = NumberFormat.getCurrencyInstance();
	nfa[3] = NumberFormat.getCurrencyInstance(locFR);
	for(NumberFormat nf : nfa)
		System.out.println(nf.format(f1));
	```
	```java
	float f1 = 123.45678f;
	NumberFormat nf = NumberFormat.getInstance();
	System.out.print(nf.getMaximumFractionDigits() + " ");
	System.out.print(nf.format(f1) + "  ");
	nf.setMaximumFractionDigits(5);
	System.out.println(nf.format(f1) + "  ");
	try {
		System.out.println(nf.parse("1234.567"));
		nf.setParseIntegerOnly(true);
		System.out.println(nf.parse("1234.567"));
	} catch (ParseException pe) {
		System.out.println("parse exc");
	}
	```

###### java.util.Locale
- Is requiered for date or number formating in a specific locale.
- A locale is a specific geographical, political, or cultural region.
- Locale constructors
	- Locale(String language)
	- Locale(String language, String country)
- 
	```java
	Calendar c = Calendar.getInstance();
	c.set(2010, 11, 14);                    // December 14, 2010
	                                       // (month is 0-based)
	Date d2 = c.getTime();
	Locale locIT = new Locale("it", "IT");  // Italy
	Locale locPT = new Locale("pt");        // Portugal
	Locale locBR = new Locale("pt", "BR");  // Brazil
	Locale locIN = new Locale("hi", "IN");  // India
	Locale locJA = new Locale("ja");        // Japan
	DateFormat dfUS = DateFormat.getInstance();
	System.out.println("US       " + dfUS.format(d2));
	DateFormat dfUSfull = DateFormat.getDateInstance(
	                                       DateFormat.FULL);
	System.out.println("US full  " + dfUSfull.format(d2));
	DateFormat dfIT = DateFormat.getDateInstance(
	                                       DateFormat.FULL, locIT);
	System.out.println("Italy    " + dfIT.format(d2));

	DateFormat dfPT = DateFormat.getDateInstance(
	                                    DateFormat.FULL, locPT);
	System.out.println("Portugal " + dfPT.format(d2));
	DateFormat dfBR = DateFormat.getDateInstance(
	                                    DateFormat.FULL, locBR);
	System.out.println("Brazil   " + dfBR.format(d2));
	DateFormat dfIN = DateFormat.getDateInstance(
	                                    DateFormat.FULL, locIN);
	System.out.println("India    " + dfIN.format(d2));
	DateFormat dfJA = DateFormat.getDateInstance(
	                                    DateFormat.FULL, locJA);
	System.out.println("Japan    " + dfJA.format(d2));
	```
	```java
	Locale locBR = new Locale("pt", "BR");  // Brazil
	Locale locDK = new Locale("da", "DK");  // Denmark
	Locale locIT = new Locale("it", "IT");  // Italy
	System.out.println("def " + locBR.getDisplayCountry());
	System.out.println("loc " + locBR.getDisplayCountry(locBR));
	System.out.println("def " + locDK.getDisplayLanguage());
	System.out.println("loc " + locDK.getDisplayLanguage(locDK));
	System.out.println("D>I " + locDK.getDisplayLanguage(locIT));
	```

### Parsing
- We will use _java.util.regex.Pattern_ and _java.util.regex.Matcher_
- Regular expressions (regex for short) are a kind of language (It's fair to think of regex as a language) within a language, designed to help programmers with searching tasks. 
- Regex tester:
    ```java
	import java.util.regex.*;
	class RegTest {
	  public static void main(String [] args) {
	    Pattern p = Pattern.compile(args[0]);
	    Matcher m = p.matcher(args[1]);
	    System.out.println("\nsource: " + args[1]);
	    System.out.println(" index: 01234567890123456\n");  // the index
	    System.out.println("expression: " + m.pattern());
	    System.out.print("match positions: ");
	    while(m.find()) {
	      System.out.print(m.start() + " ");
	    }
	    System.out.println("");
	  }
	}
    ```
- Looking for _aba_ in _abababa_, 0 and 4 is returned, but not 2 because the first three characters of the source were consumed. 
- In general, a regex search runs from left to right, and once a source's character has been used in a match, it cannot be reused.

###### Search using Metacharacters
- \d
	java RegTest "\\d" "a12c3e456f"
                  source: a12c3e456f
                  index: 01234567890123456
                  expression: \d
                  match positions: 1 2 4 6 7 8
- \D A non-digit (anything BUT 0–9)
- \s A whitespace character (e.g. space, \t, \n, \f, \r)
- \S A non-whitespace character
- \w A word character (letters (a–z and A–Z), digits, or the "_" [underscore])
	- "word characters" are A–Z, a–z, and 0–9
	   java RegTest "\\S" "w1w w$ &#w1"
   source: w1w w$ &#w1
    index: 01234567890123456
   expression: \S
   match positions: 0 1 2 4 5 7 8 9 10


- \W A non-word character (everything else)
- \b A word "boundary" (ends of the string and between \w and not \w—more soon)
	- the ends of the strings are considered to be "non-word" characters
	java RegTest "\\b" "w2w w$ &#w2"
	source: w2w w$ &#w2
	index: 01234567890123456
	expression: \b
	match positions: 0 3 4 5 9 11

- \B A non-word "boundary" (between two \w's or two not \w's)
	- But the matches on positions 0 and 11 are a bit confusing. For the sake of the exam, just imagine that for \b and \B, there is a hidden, non-word character at each end of the string that you can see.
	source: "a 1 56 _Z"
	index:   012345678
	pattern: \w
	regex will return positions 0, 2, 4, 5, 7, and 8.

	source: #ab de#
	index: 01234567890123456
	expression: \b
	match positions: 1 3 4 6
- the dot operator: "any character can serve here." 
	source: "ac abc a c"
	pattern: a.c
	will produce the output
	3 abc 7a c

###### Search using Ranges
- [abc] Searches only for a's, b's, or c's
- [a-f] Searches only for a, b, c, d, e, or f characters
- [a-fA-F] Searches for the first six letters of the alphabet, both cases.

	source: "cafeBABE"
	index:   01234567
	pattern: [a-cA-C]
	returns positions 0, 1, 4, 5, 6.

- "^" to negate the characters specified, nested brackets to create a union of sets, and "&&"
to specify the intersection of sets.While these constructs are not on the exam, they are quite useful, and good examples can be found in the API for the java.util.regex.Pattern class.

###### Search using Quantifiers
- Example: hexadecimal literals
	0[xX][0-9a-fA-F]
	The preceding expression could be stated:
	Find a set of characters in which the first character is a "0", the second character is either an "x" or an "X", and the third character is a digit from "0" to "9", a letter from "a" to "f", or an uppercase letter from "A" to "F".

	source: 12 0x 0x12 0Xf 0xg
	index: 012345678901234567
	regex would return 6 and 11. (Note: 0x and 0xg are not valid hex numbers.)

###### Groups 

- \* Zero or more occurrences
- ? Zero or one occurrence

- to separate proyects:
	..."proj3.txt,proj1sched.pdf,proj1,proj2,proj1.java"...
	proj1([^,])* (give me zero or more characters that aren't a comma.")
	10 proj1sched.pdf
	25 proj1
	37 proj1.java

- Finding phone numbers:
	1234567
	123 4567
	123-4567
	"zero or one instance of either a space or a dash" in the middle of our digits:
	\d\d\d([-\s])?\d\d\d\d

###### Greedy Quantifiers
- Quantifiers can be 
	- "greedy,"
	- "reluctant,"
	- "possessive."
- ? is greedy, ?? is reluctant, for zero or once
- * is greedy, *? is reluctant, for zero or more
- + is greedy, +? is reluctant, for one or more

source:  yyxxxyxx
pattern:  .*xx
0 yyxxxyxx

source:  yyxxxyxx
pattern:  .*?xx
0 yyxx
4 xyxx

###### Metacharacters in Strings
- "\d" for example, does not compile, the \d escape sequence does not exist. Use "\\d"
- similarly, if you want the regex engine to see a dot and not the dot metacharacter, use "\\." in java code. "\." would not compile.

##### Locating Data via Pattern Matching
- The Pattern class is used to hold a representation of a regex expression so that it can be used and reused by instances of the Matcher class, to invoke the regex engine.
	```java
	import java.util.regex.*;
	   class Regex {
	     public static void main(String [] args) {
	       Pattern p = Pattern.compile(args[0]);
	       Matcher m = p.matcher(args[1]);
	       System.out.println("Pattern is " + m.pattern());
	       while(m.find()) {
	         System.out.println(m.start() + " " + m.group());
	       }
	} }
	```

	The find() method returns true if it gets a match and remembers the start position of the match. If find() returns true, you can call the start() method to get the starting position of the match, and you can call the group() method to get the string that represents the actual bit of source data that was matched.
- m.end() also exists.
	java Regex "a?" "aba"
	should produce something very similar to this:
	Pattern is a? 01 a
	11
	23 a
	33
- Zero length matches can occur in several places:
	- After the last character of source data (the 3 3 example)
	- In between characters after a match has been found (the 1 1 example)
	- At the beginning of source data (try java Regex "a?" "baba")
	- At the beginning of zero-length source data

###### Searching Using the Scanner Class
- 
import java.util.*;
                  class ScanIn {
                    public static void main(String[] args) {
                      System.out.print("input: ");
                      System.out.flush();
                      try {
                        Scanner s = new Scanner(System.in);
                        String token;
                        do {
                          token = s.findInLine(args[0]);
                          System.out.println("found " + token);
                        } while (token != null);
                      } catch (Exception e) { System.out.println("scan exc"); }
                    }
}
- The invocation and input
	```
	java ScanIn "\d\d"
	input: 1b2c335f456
	```
produce the following:
	```
	  found 33
	  found 45
	  found null
	```

### Tokenizing
- Probably the most common tokenizing situation is reading a delimited file in order to get the contents of the file moved into useful places, like objects, arrays, or collections.
- The data starts out composed of two things: tokens(actual pieces of data) and delimiters(separate the tokens from each other).
- Delimiters can be anything that qualifies as a regex expression.

source: "ab,cd5b,6x,z4"
With comma delimiter: ab cd5b 6x z4
With  \d: ab,cd b, x,z

- we are left with the tokens, no delimeters.

###### _String.split()_
-  It takes a regex expression as its argument and returns a _String_ array populated with the resulting tokens.
	```java
	import java.util.*;
	   class SplitTest {
	     public static void main(String[] args) {
	       String[] tokens = args[0].split(args[1]);
	       System.out.println("count " + tokens.length);
	       for(String s : tokens)
	         System.out.println(">" + s + "<");
	     }
	}
	```
- You can´t look at tokens as they are produced.

###### java.util.Scanner
- Scanners can be constructed using files, streams, or strings as a source.
- Tokenizing is performed within a loop so that you can exit the process at
any point.
- Tokens can be converted to their appropriate primitive types automatically.


   import java.util.Scanner;
   class ScanNext {
     public static void main(String [] args) {
       boolean b2, b;
       int i;
       String s, hits = " ";
       Scanner s1 = new Scanner(args[0]);
       Scanner s2 = new Scanner(args[0]);
       while(b = s1.hasNext()) {
         s = s1.next();  hits += "s";
       }
       while(b = s2.hasNext()) {
         if (s2.hasNextInt()) {
           i = s2.nextInt();  hits += "i";
         } else if (s2.hasNextBoolean()) {
           b2 = s2.nextBoolean();  hits += "b";
         } else {
           s2.next();  hits += "s2";
         }
}
       System.out.println("hits " + hits);
     }
}
- The invocation
	```
	java ScanNext "1 true 34 hi"
	```
produces the following:
	```
	hits  ssssibis2
	``
- The Scanner class has nextXxx() and hasNextXxx() methods for every primitive type except char.
- The Scanner class has a useDelimiter() method that allows you to set the delimiter to be any valid regex expression.

###### java.util.StringTokenizer
	- StringTokenizer objects are constructed using strings as a source.
	- StringTokenizer objects use whitespace characters by default as delimiters, but they can be constructed with a custom set of delimiters.
	- Tokenizing is performed within a loop, you can exit the process at any point.
	- The loop used for tokenizing uses the Enumerator interface, and typically uses the hasMoreTokens() and nextToken() methods, which are very similar to Scanner's next() and hasNext() methods.
	- These days, the Iterator interface is recommended instead of Enumerator.

import java.util.*;
public class STtest {
	public static void main(String[] args) {
		StringTokenizer st = new StringTokenizer("a bc d e");

		System.out.println("\n " + st.countTokens());
		while(st.hasMoreTokens()) {
			System.out.print(">" + st.nextToken() + "<  ");
		}
		System.out.println("\n " + st.countTokens());
		// Second argument "a" is this StringTokenizer's delimiter
		StringTokenizer st2 = new StringTokenizer("a b cab a ba d", "a");
		System.out.println("\n " + st2.countTokens());
		while(st2.hasMoreTokens()) {
			System.out.print(">" + st2.nextToken() + "<  ");
		}
		System.out.println("\n " + st2.countTokens());
	}
}

### Formatting

###### printf() and format()
- They work in exactly the same way.
- java.util.Formatter is used behind the scenes.
- Formatting data will always start with a percent sign (%).
- 
 System.out.printf("%2$d  +  %1$d", 123, 456);
produces
456 + 123

- format strings: %[arg_index$][flags][width][.precision]conversion char
	- arg_index - indicates which argument should be printed.
	- flags - you'll need to know:
		- '-': Left-justify this argument.
		- '+': Include a sign, plus or minus.
		- '0': Pad this argument with zeroes.
		- ',': Use locale specific grouping separators.
		- '(': Enclose negative nnumbers in parenthesis.
	- width - indicates the minimum number of characters to print.
	- precision - in the case of floating-point numbers, precision indicates the number of digits to print after the decimal point.
	-conversion - The type of argument you'll be formatting.
		- 'b' - boolean.
		- 'c' - char.
		- 'd' - integer.
		- 'f' - floating point.
		- 's' - string.
int i1 = -123;
int i2 = 12345;
System.out.printf(">%1$(7d< \n", i1);
System.out.printf(">%0,7d< \n", i2);
System.out.format(">%+-7d< \n", i2);
System.out.printf(">%2$b + %1$5d< \n", i1, false);
- Barring the use of booleans—if you have a mismatch between the type specified in your conversion character and your argument, you'll get a runtime exception.
System.out.format("%d", 12.3);

### Resource Bundles
- Using a resource bundle has three steps: obtaining the Locale, getting the ResourceBundle, and looking up a value from the resource bundle. First, we create a Locale object.
Labels_en.properties
	hello=Hello Java!
Labels_fr.properties
	hello=Bonjour Java!
WhichLanguage.java
	import java.util.Locale;
	import java.util.ResourceBundle;
	public class WhichLanguage {
		public static void main(String[] args) {
			Locale locale = new Locale(args[0]);
			ResourceBundle rb = ResourceBundle.getBundle("Labels", locale);
			System.out.println(rb.getString("hello"));
		}
	}
Running the code:
   java WhichLanguage en
   java WhichLanguage fr

##### Property Resource Bundles
	- Aside from comments, a property file contains key/value pairs:
    ```java
	# this file contains a single key/value
	hello=Hello Java
	```
	- If you want to break up a single line into multiple lines, you use a backslash.
	- Java helpfully ignores any whitespace before subsequent lines of a multiline property so you can indentate.
	- If you actually want a line break, you use the standard Java \n escape sequence.
	- alternative syntaxes use ! to comment and : or a space to assign a value.
##### Java Resource Bundles
	- Used to go beyond simple property file key to string value mappings, for example to read from a database.
	- We write Java classes that extend _ListResourceBundle_, and implement
	 protected Object[][] getContents(). The inner array is key/value pairs.

 import java.util.ListResourceBundle;
                  public class Labels_en_CA extends ListResourceBundle {
                    protected Object[][] getContents() {
                      return new Object[][] {
                         { "hello", new StringBuilder("from Java") }
                       };
} }

	  Locale locale = new Locale(args[0], "CA");
                  ResourceBundle rb = ResourceBundle.getBundle("Labels", locale);
                  System. out.println(rb.getObject("hello"));

##### Default Locale
- To get and set the default locale:
// store locale so can put it back at end
Locale initial  = Locale.getDefault();
System.out.println(initial);
// set locale to Germany
Locale.setDefault(Locale.GERMANY);
System.out.println(Locale.getDefault());
// put original locale back
Locale.setDefault(initial);
System.out.println(Locale.getDefault());


ResourceBundle.getBundle(baseName)is just shorthand for ResourceBundle.getBundle(baseName, Locale.getDefault())

Locale locale = new Locale("fr", "CA");
ResourceBundle rb = ResourceBundle.getBundle("RB", locale);
Java will look for the following files in the classpath in this order:
RB_fr_CA.java // exactly what we asked for
RB_fr_CA.properties

RB_fr.java 				// couldn't find exactly what we asked for
RB_fr.properties		// now trying just requested language
RB_en_US.java 			// couldn't find French
RB_en_US.properties	 	// now trying default Locale
RB_en.java 				// couldn't find full default Locale country
RB_en.properties 		// now trying default Locale language
RB.java 				// couldn't find anything any matching Locale,
RB.properties 			// now trying default bundle

If none of these files exist, Java gives up and throws a MissingResourceException
 Start with the full Locale requested. Then fall back to just language. Then fall back to the default Locale. Then fall back to the default bundle.

 You don't have to specify all the keys in all the property files. They can inherit
from each other.
Properties can be inherited from parents, noncountry-specific bundles for example.
  RB_en.properties
                    ride.in=Take a ride in the
                  RB_en_US.properties
                    elevator=elevator
                  RB_en_UK.properties
                    elevator=lift
Locale locale = new Locale("en", "UK");
ResourceBundle rb = ResourceBundle.getBundle("RB", locale); System.out.println(rb.getString("ride.in") +
                                     rb.getString("elevator"));

A bundle's parent always has a shorter name than the child bundle.

resource bundles allow you to move locale-specific information (usually strings) out of your code and into external files where they can easily be amended.