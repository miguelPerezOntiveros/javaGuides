
--------------------------------------------------------
11

HashSet is an unordered, unsorted set
LinkedHashSet is an ordered (order of insertion) but not sorted set
A Hashtable collection is not ordered.
An ArrayList, however, keeps the order established by the elements' index position
LinkedHashSet keeps the order established by insertion

natural order of the elements = sorted
Sorting is done based on properties of the objects themselves.
Natural order is alphabetically, by numeric value or for objects: depending on the Comparable. In some cases, a class might also inherit a natural order from a superclass rather than define its own order.


List Interface
	ArrayList
		implements the new RandomAccess interface—marker interface (meaning it has no methods)
		Choose this over a LinkedList when you need fast iteration but aren't as likely to be doing a lot of insertion and deletion.
	Vector
		synchronized ArrayList.

Polymorphism applies to the "base" type of the collection:
These are wrong:
   List<Object> myList = new ArrayList<JButton>();       // NO!
   List<Number> numbers = new ArrayList<Integer>();      // NO!
   // remember that Integer is a subtype of Number
But these are fine:
   List<JButton> bList = new ArrayList<JButton>(); // yes
   List<Object> oList = new ArrayList<Object>();   // yes
   List<Integer> iList = new ArrayList<Integer>(); // yes

This is NOT true for arrays, where you are allowed to do this:
  import java.util.*;
  class Parent { }
  class Child extends Parent { }
  public class TestPoly {
    public static void main(String[] args) {
      Parent[] myArray = new Child[3];
} }
and this:
  Object[] myArray = new JButton[3];


public void addAnimal(ArrayList<Animal> animals) {
     animals.add(new Dog()); // sometimes allowed...
}
The previous code WILL compile just fine IF what you pass into the method is also an ArrayList<Animal>. Using arrays you COULD pass a Dog[] into the method that takes an Animal[].

The following will compile because there is a runtime exception (ArrayStoreException) that will prevent you from putting the wrong type of object into an array. There is no equivalent exception for generics because of type erasure..
public void foo() {
     Cat[] cats = {new Cat(), new Cat()};
     addAnimal(cats);         // no problem, send the Cat[] to the method
}
public void addAnimal(Animal[] animals) {
     animals[0] = new Dog();  // Eeek! We just put a Dog in a Cat array!
}

The following will not compile:
public void addAnimal(List<Animal> animals) {
	animals.add(new Dog());  // still OK as always
}
public static void main(String[] args) {
	List<Dog> animals = new ArrayList<Dog>();
	animals.add(new Dog());
	animals.add(new Dog());
	AnimalDoctorGeneric doc = new AnimalDoctorGeneric();
	doc.addAnimal(animals); // THIS is where it breaks! can´t pass a list of dogs when a list of animals was expected
}

The generic type of an object is ALWAYS the same as the generic type declared on the reference. List<Dog> can refer ONLY to collections that are subtypes of List but which were instantiated as generic type <Dog>.)

With the wild card ```<?>``` you are telling the compiler "Hey, I'm using the collection passed in just to invoke methods on the elements — and I promise not to ADD anything into the collection.".
To tell the compiler that you will take any generic subtype of the declared argument type because you won't be putting anything in the collection, you can change 
   public void addAnimal(List<Animal> animals)
to
   public void addAnimal(List<? extends Animal> animals)

On the wild card noration, extends is used for both extention and implementation, in other words  "IS-A", or anything that passes the instanceof test.

"Hey, compiler, please accept any List with a generic type that is of type Dog or a supertype of Dog"
	public void addAnimal(List<? super Dog> animals)
A collection declared as any supertype of Dog will be able to accept a Dog as an element (you can add stuff). 

List<?> list means any type but you cannot ADD anything since it hasn´t got the super keyword followed by a type.
List<Object> list´´´ means that the method can take ONLY a List<Object>, not any subtypes of object, but you CAN add things.

List<? extends Object> and List<?> are absolutely identical

Statement List<?> foo = new ArrayList<? extends Animal>();
Problem You cannot use wildcard notation in the object creation. So the new ArrayList<? extends Animal>() will not compile.

Statement List<? extends Dog> cList = new ArrayList<Integer>();
Problem You cannot assign an Integer list to a reference that takes only a Dog (including any subtypes of Dog, of course).

Statement List<? super Animal> dList = new ArrayList<Dog>();
Problem You cannot assign a Dog to <? super Animal>. The Dog is too "low" in the class hierarchy. Only <Animal> or <Object> would have been legal.

a nested interface is automatically "static"

| java.lang.Comparable                                                                     | java.util.Comparator                                                        |
|------------------------------------------------------------------------------------------|-----------------------------------------------------------------------------|
| int objOne.compareTo(objTwo)                                                             | int compare(objOne, objTwo)                                                 |
| Returns negative if objOne < objTwo zero if objOne == objTwo positive if objOne > objTwo | Same as Comparable                                                          |
| You must modify the class whose instances you want to sort.                              | You build a class separate from the class whose instances you want to sort. |
| Only one sort sequence can be created.                                                   | Many sort sequences can be created.                                         |
| Implemented frequently in the API by: String, Wrapper classes, Date, Calendar...         | Meant to be implemented to sort instances of third-party classes.           |

Deque
	offer 	add 	back
	add		add		back
	push	add 	front
	poll	remove 	front
	pop 	remove	front
	remove 	remove	front
	peek	peek	front

Generic Class Declarations
	import java.util.*;
	public class RentalGeneric<T> {
		private List<T> rentalPool;
		private int maxNum; 
		public RentalGeneric(int maxNum, List<T> rentalPool) {
			this.maxNum = maxNum;
			this.rentalPool = rentalPool; 
		}
		public T getRental() {
			return rentalPool.get(0);
		}
		public void returnRental(T returnedThing) {
			rentalPool.add(returnedThing); 
		}
	}

Generic Method Declarations
	import java.util.*;
	public class CreateAnArrayList {
		public <T> void makeArrayList(T t) {
			List<T> list = new ArrayList<T>();
			list.add(t);
		}
	}
If you invoke the makeArrayList() method with a Dog instance, the method will behave as though it looked like this:
	public void makeArrayList(Dog t) {
		List<Dog> list = new ArrayList<Dog>();
		list.add(t);
	}

--------------------------------------------------------
13

A thread in Java begins as an instance of java.lang.Thread. So if the work you want done is the job, the one doing the work (actually executing the job code) is the thread.
the job always starts from a run() method
You can define and instantiate a thread in one of two ways:
■ Extend the java.lang.Thread class.
■ Implement the Runnable interface.
you're much more likely to implement Runnable than extend Thread. (subclassing should be reserved for specialized versions of more general superclasses.)

Extending java.lang.Thread
	Extend the java.lang.Thread class and override the run() method.
	if you extend Thread, you can't extend anything else.
	You can overload the run method but it will be ignored by the Thread class unless you call it yourself.

Implementing java.lang.Runnable
	you can still extend a class

Instantiating a Thread
	Extending Thread:
		´´´
		MyThread t = new MyThread();
		´´´
		The Thread class itself implements Runnable. This means that you could pass a Thread to another Thread's constructor.
	Implementing Runnable: 
		´´´
		MyRunnable r = new MyRunnable();
		Thread t = new Thread(r);
		´´´
		You can pass a single Runnable instance to multiple Thread objects so that the same Runnable becomes the target of multiple threads.

Thread has other constructors:
	■ Thread()
	■ Thread(Runnable target)
	■ Thread(Runnable target, String name) 
	■ Thread(String name)

The isAlive() method returns wether a thread has been started but has not yet completed its run() method.

Starting a Thread
t.start();
Things that happen when calling start():
■ A new thread of execution starts (with a new call stack).
■ The thread moves from the new state to the runnable state.
■ When the thread gets a chance to execute, its target run() method will run.
Calling a Thread's run() method directly just means you're invoking a method from whatever thread is currently executing, and the run() method goes onto the current call stack rather than at the beginning of a new call stack.
Thread has setName(String) and  getName() methods.
A Runnable can get the current thread with the static ```Thread.currentThread()``

Things that happen when run() is completed:
the Thread ceases to be a thread of execution, it is considered terminated or dead.
The stack for that thread dissolves.
It's still a Thread object though, you can call its methods.
You can´t call start() again. Once a thread has been started, it can never be started again. if you call start, it will thow an IllegalThreadStateException whether or not the run() method has completed from the first start() call.

A thread needs to be in the runnable state to be chosen by the scheduler to be the one and only running thread.
from the java.lang.Thread Class Some of the methods that can help us influence thread scheduling are as follows:
	public static void sleep(long millis) throws InterruptedException
	public static void yield()
	public final void join() throws InterruptedException
	public final void setPriority(int newPriority)
from the java.lang.Object, the following three thread-related methods. They must be called from within a synchronized context, the thread must own that object's lock:
	public final void wait() throws InterruptedException
	public final void notify()
	public final void notifyAll()

Thread states:
	New
	Runnable
	Running
	Waiting/blocked/sleeping (thread still considered alive)
	Dead

				/ Blocked <-
	         <-              \
	New -> Runnable <-> Running -> Dead

In most cases, the running thread will be of equal or greater priority than the highest-priority threads in the pool.
A thread gets a default priority that is the priority of the thread of execution that creates it.
You can set a thread's priority directly by calling its setPriority() method.
Priorities are usually (not always) set using integer between 1 and 10.
Although the default priority is 5, the Thread class has the three following constants (static final variables) that define the range of thread priorities:
   Thread.MIN_PRIORITY  (1)
   Thread.NORM_PRIORITY  (5)
   Thread.MAX_PRIORITY  (10)	

three ways a running thread could leave the running state: sleep(), yield() and join(). ```t.sleep();``` or ```t.yield();``` are static methods, and affect the currently executing thread.
sleep()
	When a thread encounters a sleep call, it must go to sleep for at least the specified number of milliseconds (unless it is interrupted before its wake-up time, in which case, it immediately throws the InterruptedException).
yield()
	the static Thread.yield() is supposed to make the currently running thread head back to runnable to allow other threads of the same priority to get their turn, but it may be the selected thread to run again.
join()
	the non-static Thread.join() lets one thread "join onto the end" of another thread.
	If you run ```t.join();``` from the main method, then the main thread will wait for the t thread to die. "Join me (the current thread) to the end of t, so that t must finish before I (the current thread) can run again".
	An overloaded version accepts the number of milliseconds, after they have passed, the current thread will become runable even if the thread it was waiting for is still alive.
	if the thread it's trying to join with is not alive, the current thread won't need to back out.
Other reasons a thread can leave the running state:
	The thread's run() method completes. 
	A call to wait() on an object, not on a thread.
	A thread can't acquire the lock on the object whose method code it's attempting to run.
	The thread scheduler decides so.

Synchronization and Locks
Every object in Java has a built-in lock that only comes into play when the object has synchronized method code.
If one thread has picked up a lock, no other thread can enter the synchronized code.
Only methods (or blocks) can be synchronized, not variables or classes.
Each object has just one lock.
If you have methods that don't access the data you're trying to protect, then you don't need to synchronize them. Synchronization can cause a hit in some cases (or even deadlock if used incorrectly).
If a thread goes to sleep, it holds any locks it has — it doesn't release them.
A thread can acquire more than one lock. For example entering a synchronized method, and then immediately invoking a synchronized method on a different object. As the stack unwinds, locks are released again.
If a thread calls a synchronized method on an object he already has the lock for, no problem.
You can synchronize a block of code rather than a method:
´´´
class SyncTest {
    public void doStuff() {
		System.out.println("not synchronized");
		synchronized(this) {
			System.out.println("synchronized");
		}
	}
}
´´´
When you synchronize a method, the object used to invoke the method is the object whose lock must be acquired. But when you synchronize a block of code, you specify which object's lock you want to use as the lock, so you could, for example, use some third-party object as the lock for this piece of code.
You could always replace a synchronized method with a non-synchronized method containing a synchronized block.
static methods can be synchronized, but unstead of "this" you would use ```MyClass.class``` or ```Class.forName("MyClass")```. Only objects can be used to synchronize on.

If a thread tries to get a lock that is already taken, it has to sit there until the lock is released and the thread can again become runnable/running. When a lock is released, any thread waiting could be the one to get it.
Threads calling non-static synchronized methods in the same class will only block each other if they're invoked using the same instance.
Threads calling static synchronized methods in the same class will always block each other — they all lock on the same Class instance.
A static synchronized method and a non-static synchronized method will not block each other, ever.
Generally, any time more than one thread is accessing mutable (changeable) data, you synchronize to protect that data to make sure two threads aren't changing it at the same time or that one isn't changing it at the same time the other is reading it.
To keep things simple, access to static fields should be done using static synchronized methods. Access to non-static fields should be done using non-static synchronized methods. Many confusing scenarios can occure otherwise.
Thread-safe classes.
Just because a class is described as "thread-safe" doesn't mean it is always thread-safe. If individual methods are synchronized, that may not be enough—you may be better off putting in synchronization at a higher level (i.e., put it in the block or method that calls the other methods). Once you do that, the original synchronization may well become redundant.

Thread Interaction
to communicate with each other about their locking status, the Object class has wait(), notify(), and notifyAll().
using wait() and notify() lets one thread put itself into a "waiting room" until some other thread notifies it that there's a reason to come back out.
wait(), notify(), and notifyAll() must be called from within a synchronized context! A thread can't invoke a wait or notify method on an object unless it owns that object's lock.
A thread gets on an object's waiting list by executing the wait() method of the target object. From that moment, it doesn't execute any further instructions until the notify() method of the target object is called.  If many threads are waiting on the same object, only one will be chosen.
if the thread calling wait() does not own the lock, it will throw an IllegalMonitorStateException. 
A waiting thread can be interrupted in the same way as a sleeping thread, so you have to take care of the exception
There is also a second form of wait() that accepts a number of milliseconds as a maximum time to wait. After the specified time, the thread goes back to Runnable.
 notifyAll() is used to notify all threads waiting, instead of just one.
 when you want to wait for something, you also need to be able to check if it has already happened. Generally, the best way to solve this is to put in some sort of loop that checks on some sort of conditional expressions and only waits if the thing you're waiting for has not yet happened.
 when your thread wakes up from a wait(), you don't know for sure why it was awakened: 'spontaneous wakeup'.
 when you use wait() and notify() or notifyAll(), you should almost always also have a while loop around the wait() that checks a condition and forces continued waiting until the condition is met.

Of Thread, static methods are sleep() and yield(), not static methods are join() and start().

when an object goes to sleep, it holds onto any locks it acquired prior to sleeping. When a thread goes to sleep, its locks will be unavailable to other threads
A wait() call means "let me wait in your pool" or "add me to your waiting list.", "notify me later"
The notify() method CANNOT specify which waiting thread to notify.

Deadlocking can occur when a locked object attempts to access another locked object that is trying to access the first locked object. In other words, both threads are waiting for each other's locks to be released; therefore, the locks will never be released. Thread execution halts.

sleep and join may throw exceptions.
When a thread is waiting as a result of wait(), it releases its lock




--------------------------------------------------------
14

java.util.concurrent.atomic
	Most modern CPUs have a set of CAS (Compare and Swap) instructions.
	```private AtomicInteger count = new AtomicInteger(); count++;```
	1. The value stored in count is copied to a temporary variable.
	2. The temporary variable is incremented.
	3. Compare the value currently in count with the original value. If it is unchanged, then swap the old value for the new value.
	Step 3 happens atomically. If step 3 finds that some other thread has already modified the value of count, then repeat steps 1–3 until we increment the field without interference.

java.util.concurrent.locks
provides:
	■ The ability to duplicate traditional synchronized blocks.
	■ Nonblock scoped locking—obtain a lock in one method and release it in
	another (this can be dangerous, though).
	■ Multiple wait/notify/notifyAll pools per lock—threads can select which
	pool (Condition) they wait on.
	■ The ability to attempt to acquire a lock and take an alternative action if
	locking fails.
	■ An implementation of a multiple-reader, single-writer lock.

	java.util.concurrent.locks package.
	java.util.concurrent.locks.Lock interface.
	java.util.concurrent.locks.ReentrantLock implementation of the above interface.

	With traditional synchronization, once you hit a synchronized block, your thread either immediately acquires the lock or blocks until it can. with reentrant locks You can use ```.tryLock()``` and ```tryLock(3, TimeUnit.SECONDS)```.
	You don´t have the deadlock problem you can get with 2 locks traditionally:
	```
		boolean aq1 = l1.tryLock();
		boolean aq2 = l2.tryLock();
		try{
			if (aq1 && aq2) {
			// work
			}
		} finally {
			if (aq2) l2.unlock(); // don't unlock if not locked
			if (aq1) l1.unlock();
		}

	```
	The if´s inside the finnally block are there becase if a thread attempts to release a lock that it does not own, an IllegalMonitorStateException will be thrown.
	The java.util.concurrent.locks.Condition interface is the modern replacement for the wait and notify methods.

	A Condition is created from a Lock object:
	```
	Lock lock = new ReentrantLock();
   	Condition blockingPoolA = lock.newCondition();
   	blockingPoolA.await(); //wait here
   	blockingPoolA.signalAll(); // in another thread, you can signal that the other threads waiting on the condition can stop waiting.
   	```
Executor
	Executors class (notice the "s" at the end) is a factory for Executor implementations.
	Types of ExecutorService instances thst can be created: 
		- cached thread pool executors. ExecutorService ex = Executors.newCachedThreadPool();
			will create new threads as they are needed and reuse threads that have become free. Threads that have been idle for 60 seconds are removed from the pool.
		- fixed thread pool executors (most common). ExecutorService ex = Executors.newFixedThreadPool(4);
		- single thread pool executors. ExecutorService ex = Executors.newSingleThreadExecutor();
		- ScheduledThreadPoolExecutor. ScheduledExecutorService ftses = Executors.newScheduledThreadPool(4);
	ex.shutdown(); ex.awaitTermination(2, TimeUnit.SECONDS); ex.isTerminated() ex.shutdownNow();

Callable
	Unlike the Runnable interface, a Callable may return a result upon completing execution and may throw a checked exception.
	An ExecutorService can be passed a Callable instead of a Runnable.

```ThreadLocalRandom.current().nextInt(1, 11);``` creates a random number in the given range.

ForkJoin Task
	a java.util.concurrent.ForkJoinTask instance (actually a subclass—more on that later) is created to represent the task that should be accomplished.
	has many methods including:
		-compute()
		-fork()
		-join()
	each thread in the ForkJoinPool has a queue of the tasks it is working on. The fork() method places a ForkJoinTask in the current thread's task queue.
	A normal thread does not have a queue of tasks—only the specialized threads in a ForkJoinPool do: you can't call fork() unless you are within a ForkJoinTask that is being executed by a ForkJoinPool.