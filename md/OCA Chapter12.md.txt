# Chapter 12: Inner Classes

### 'top-level nested class' (an inner class marked static)

### Inner Classes

- one of the key benefits of an inner class is the "special relationship" an inner class instance shares with an instance of the outer class. That "special relationship" gives code in the inner class access to members of the enclosing (outer) class, as if the inner class were part of the outer class
 - An inner class instance has access to all members of the outer class, even those marked private.

###### Compiling
- Source
	- class MyOuter { class MyInner { } } 
- Command
	- javac MyOuter.java
- Result
	- MyOuter.class
	- MyOuter$MyInner.class
- But you cannot 
	- java MyOuter$MyInner

### Regular Inner Classes
- The term _regular_ will be used to represent inner classes that are not _Static_, _Method-local_ or _Anonymous_.
- A regular inner class cannot have static declarations of any kind.
- To create an instance of an inner class, you must have an instance of the outer class to tie to the inner class.

##### Creating an Inner Class Object
- Creating it from inside  the Outside Class is simple, just write the code inside the Outside Class brackets.
- From the Outside:
    ```java
	public static void main(String[] args) {
		MyOuter mo = new MyOuter(); // gotta get an instance!
		MyOuter.MyInner inner = mo.new MyInner(); inner.seeOuter();
	}
    ```
-  Instantiating an inner class is the only scenario in which you'll invoke new on an instance as opposed to invoking new to construct an instance.

##### Referencing from within the Inner Class
- _this_ normally:
	- The keyword _this_ can be used only from within instance code. In other words, not within static code.
	- The _this_ reference is a reference to the currently executing object.
	- The _this_ reference is the way an object can pass a reference to itself as an argument.
- As expected, from an inner class, _this_ references the Inner Class.
- To reference the outer class instance, use _NameOfOuterClass.this_.

##### Aplicable members
- A regular inner class is a member of the outer class just as instance variables and methods are, so the following modifiers can be applied to an inner class:
	- final
	- abstract
	- public
	- private
	- protected
	- static (turns it into a static nested class, not an inner class)
	- strictfp

### Method-Local Inner Classes
- These classes are defined inside a class method.
- To use the inner class, you must make an instance of it somewhere within the method but below the inner class definition (no where else).
- The method-local inner class object can access the enclosing (outer) class object's private (or any other) members. 
- However, the inner class object cannot use the local variables of the method the inner class is in (Because the local variables aren't guaranteed to be alive as long as the method-local inner class object is), unless the local variables are marked final.
-  The same rules apply to method-local inner classes as to local variable declarations. You can't, for example, mark a method-local inner class public, private, protected, static, transient, and the like. For the purpose of the exam, the only modifiers you can apply to a method-local inner class are abstract and final, but, as always, never both at the same time.


Remember that a local class declared in a static method has access
to only static members of the enclosing class, since there is no associated instance of the enclosing class. If you're in a static method, there is no this, so an inner class in a static method is subject to the same restrictions as the static method. In other words, no access to instance variables.

### Anonymous Inner Classes
- Inner classes declared without any class name at all.
- You can define these classes within a method, or within an argument to a method.
- page 742

- -to do-

### Static Nested Classes
- -to do-
