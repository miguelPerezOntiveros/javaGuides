# Chapter 12: Inner Classes

### Inner Classes

- One of the key benefits of an inner class is the "special relationship" an inner class instance shares with an instance of the outer class. That "special relationship" gives code in the inner class access to members of the enclosing (outer) class, as if the inner class were part of the outer class: an inner class instance has access to all members of the outer class, even those marked private.

###### Compiling
- Source
	- class MyOuter { class MyInner { } } 
- Command
	- javac MyOuter.java
- Result
	- MyOuter.class
	- MyOuter$MyInner.class
- But you cannot 
	- java MyOuter$MyInner

### Regular Inner Classes
- The term _regular_ will be used to represent inner classes that are not _Static_, _Method-local_ or _Anonymous_.
- A regular inner class cannot have static declarations of any kind.
- To create an instance of an inner class, you must have an instance of the outer class to tie to the inner class.

##### Creating an Inner Class Object
- Creating it from inside  the Outside Class is simple, just write the code inside the Outside Class brackets.
- From within the outer class, the _MyOuter_ code treats _MyInner_ just as though MyInner were any other accessible class:
    ```java
	class MyOuter {
		private int x = 7;
		public void makeInner() {
			MyInner in = new MyInner();  // make an inner instance
			in.seeOuter();
		}
		class MyInner {
			public void seeOuter() {
				System.out.println("Outer x is " + x);
			}
		} 
	}
    ```
- From outside of the outer class:
    ```java
	public static void main(String[] args) {
		MyOuter mo = new MyOuter(); // gotta get an instance!
		MyOuter.MyInner inner = mo.new MyInner(); inner.seeOuter();
	}
    ```
-  Instantiating an inner class is the only scenario in which you'll invoke new on an instance as opposed to invoking new to construct an instance.

##### Referencing from within the Inner Class
- _this_ normally:
	- The keyword _this_ can be used only from within instance code. In other words, not within static code.
	- The _this_ reference is a reference to the currently executing object.
	- The _this_ reference is the way an object can pass a reference to itself as an argument.
- As expected, from an inner class, _this_ references the Inner Class.
- To reference the outer class instance, use _NameOfOuterClass.this_.

##### Aplicable members
- A regular inner class is a member of the outer class just as instance variables and methods are, so the following modifiers can be applied to an inner class:
	- final
	- abstract
	- public
	- private
	- protected
	- static (turns it into a static nested class, not an inner class)
	- strictfp

### Method-Local Inner Classes
- These classes are defined inside a class method.
- To use the inner class, you must make an instance of it somewhere within the method but below the inner class definition (no where else).
- The method-local inner class object can access the enclosing (outer) class object's private (or any other) members. 
- However, the inner class object cannot use the local variables of the method the inner class is in (Because the local variables aren't guaranteed to be alive as long as the method-local inner class object is), unless the local variables are marked final.
-  The same rules apply to method-local inner classes as to local variable declarations. You can't, for example, mark a method-local inner class public, private, protected, static, transient, and the like. For the purpose of the exam, the only modifiers you can apply to a method-local inner class are abstract and final, but, as always, never both at the same time.
- You can't apply an access modifier the way you can with a regular inner class
- A local class declared in a static method has access to only static members of the enclosing class, since there is no associated instance of the enclosing class. If you're in a static method, there is no _this_, so an inner class in a static method does not have access to instance variables.
- Example:
    ```java
	class MyOuter2 {
		private String x = "Outer2";
		void doStuff() {
			class MyInner {
				public void seeOuter() {
					System.out.println("Outer x is " + x);
				}  // close inner class method
			}    // close inner class definition
			MyInner mi = new MyInner();  // This line must come after the class
			mi.seeOuter();
		} // close outer class method doStuff()
	}   // close outer class
    ```

### Anonymous Inner Classes
- Inner classes declared without any class name at all.
- You can define these classes within a method, or within an argument to a method.

###### Anonymous subclass of a class
- 
	```java
	class Popcorn {
		public void pop() {
			System.out.println("popcorn");
		}
	}
	class Food {
		// p is a Popcorn reference to an instance of an unnamed class, which is a subclass of Popcorn, it's pop method has been overriden.
		Popcorn p = new Popcorn() {
			public void pop() {
				System.out.println("anonymous popcorn");
			}
		}; // please notice this semicolon.
	}
	```
- Polymorfism is takin place. You can only call methods on an anonymous inner class reference that are defined in the reference variable type.

###### Anonymous subclass of a class
- 
	```java
	interface Cookable {
		public void cook();
	}
	class Food {
		Cookable c = new Cookable() {
			public void cook() {
				System.out.println("anonymous cookable implementer");
			}
		};
	}
	```
- this is the only time you could use the syntax 'new Cookable()', where Cookable is an interface.
- Anonymous interface implementers can implement only one interface. It can't even extend a class and implement an interface (directly) at the same time. 

###### Argument-Defined Anonymous Inner Classes
-	
	```java
	class MyWonderfulClass {
		void go() {
			Bar b = new Bar();
			b.doStuff(new Foo() {
				public void foof() {
					System.out.println("foofy");
				} // end foof method
			});
		}
	}
	interface Foo {
		void foof();
	}
	class Bar {
		void doStuff(Foo f) { }
	}
	```

### Static Nested Classes
- Just as a static method does not have access to the instance variables and nonstatic methods of the class, a static nested class does not have access to the instance variables and nonstatic methods of the outer class.
- They really aren't inner classes at all based on the standard definition of an inner class. The instances of an inner class share a relationship with the instances of an outter class, but this doesn't happen with static nested classes.
- A static nested class is simply a class that's a static member of the enclosing class.
	```java
	class BigOuter {
		static class Nest { void go() { System.out.println("hi"); } }
	}
	class Broom {
		static class B2 { void goB2() { System.out.println("hi 2"); } }
		public static void main(String[] args) {
			BigOuter.Nest n = new BigOuter.Nest(); n.go();
			B2 b2 = new B2();
			b2.goB2();
		}
	}
	```

